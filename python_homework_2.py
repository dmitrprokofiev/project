#!/usr/bin/env python
# coding: utf-8

# In[4]:


# Создать список и заполнить его элементами различных типов данных. Реализовать скрипт 
# проверки типа данных каждого элемента. Использовать функцию ​type() для проверки типа. 
# Элементы списка можно не запрашивать у пользователя, а указать явно, в программе. 


# In[1]:


a = [45, None, 654.8, 'pass']
for i in a:
    print(i, type(i))


# In[5]:


# Для списка реализовать обмен значений соседних элементов. Значениями обмениваются 
# элементы с индексами 0 и 1, 2 и 3 и т. д. При нечётном количестве элементов последний 
# сохранить на своём месте. Для заполнения списка элементов нужно использовать функцию 
# input()​. 


# In[31]:


l = list(input())
b = 0
while len(l) - 1 > b:
    l[b], l[b+1] = l[b+1], l[b]
    b += 2
    print(l)


# In[6]:


# Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить, к какому времени года 
# относится месяц (зима, весна, лето, осень). Напишите решения через list и dict.  


# In[28]:


# решим задачу через список
mounth = int(input('Введите номер месяца '))
l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
m = ['зима', 'весна', 'лето', 'осень']
if 0 < mounth < 13:
    if (mounth in l[2:5]) == 1:
        print(m[1])
    elif (mounth in l[5:8]) == 1:
        print(m[2])
    elif (mounth in l[8:11]) == 1:
        print(m[3])
    else:
        print(m[0])
else:
    print('Нет такого месяца!')


# In[4]:


## решим задачу через словарь
l = int(input('Введите номер месяца '))
m = {1: 'зима',
    2: 'зима',
    3: 'весна',
    4: 'весна',
    5: 'весна',
    6: 'лето',
    7: 'лето',
    8: 'лето',
    9: 'осень',
    10: 'осень',
    11: 'осень',
    12: 'зима'}
print(m.get(l, 'Такого месяца не сущесвует!'))


# In[7]:


# Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое 
# слово с новой строки. Строки нужно пронумеровать. Если слово длинное, выводить только 
# первые 10 букв в слове. 


# In[1]:


a = input()
for i, g in enumerate(a.split()):
    print(i, g[:10])


# In[23]:


# Реализовать структуру ​«​Рейтинг​»​, представляющую собой набор натуральных чисел, который 
# не возрастает. У пользователя нужно запрашивать новый элемент рейтинга. Если в рейтинге 
# существуют элементы с одинаковыми значениями, то новый элемент с тем же значением 
# должен разместиться после них. 
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2. 
# Пользователь ввёл число 3. Результат: 7, 5, 3, 3, ​3​, 2. 
# Пользователь ввёл число 8. Результат: ​8​, 7, 5, 3, 3, 2. 
# Пользователь ввёл число 1. Результат: 7, 5, 3, 3, 2, ​1​. 
# Набор натуральных чисел можно задать сразу в коде, например, my_list = [7, 5, 3, 3, 2]. 


# In[36]:


my_list = [7, 5, 3, 3, 2]
my_list.append(int(input()))
my_list.sort(reverse=True)
my_list


# In[ ]:


#  *Реализовать структуру данных ​«​Товары​»​. Она должна представлять собой список кортежей. 
# Каждый кортеж хранит информацию об отдельном товаре. В кортеже должно быть два 
# элемента ​— номер товара и словарь с параметрами, то есть характеристиками товара: 
# название, цена, количество, единица измерения. Структуру нужно сформировать программно, 
# запросив все данные у пользователя. 
# Пример готовой структуры: 
# [ 
#     (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}), 
#     (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),  
#     (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”}) 
# ] 

 

# © geekbrains.ru 37 

# [(​'a'​, ​'c'​, ​'e'​), (​'b'​, ​'d'​, ​'f'​)] 


 

# Нужно собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ ​— 
# характеристика товара, например, название. Тогда значение ​— список 
# значений-характеристик, например, список названий товаров. 

 

# Пример: 
# { 
#     “название”: [“компьютер”, “принтер”, “сканер”], 
#     “цена”: [20000, 6000, 2000], 
#     “количество”: [5, 2, 7], 
#     “ед”: [“шт.”] 
# } 


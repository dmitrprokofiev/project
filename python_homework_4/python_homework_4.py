#!/usr/bin/env python
# coding: utf-8

# In[1]:


# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной 
# платы сотрудника. Используйте в нём формулу: (выработка в часах*ставка в час) + премия. Во 
# время выполнения расчёта для конкретных значений необходимо запускать скрипт с 
# параметрами. 


# In[ ]:


#отдельный файл zarplata.py для проверки работоспособности
from sys import argv

h, s, p, v = argv
print((int(s)*int(p))+int(v))


 


# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения 
# которых больше предыдущего элемента. 

# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его 
# формирования используйте генератор. 

# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]. 

# Результат: [12, 44, 4, 10, 78, 123]. 





listok = [56, 3, 32, 3, 21, 8, 6, 21, 31, 11, 11, 0, 2, 1, 41]
print([el for i, el in enumerate(listok) if listok[i] > listok[i-1]])





# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну 
# строку. 

# Подсказка: используйте функцию ​range()​и генератор. 





print([i for i in range(20, 240) if i % 20 == 0 or i % 21 == 0])





# 4. Представлен список чисел. Определите элементы списка, не имеющие повторений. 
# Сформируйте итоговый массив чисел, соответствующих требованию. Элементы выведите в 
# порядке их следования в исходном списке. Для выполнения задания обязательно используйте 
# генератор. 

# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]. 

# Результат: [23, 1, 3, 10, 4, 11] 





listok = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
print([i for i in listok if listok.count(i) == 1])





# 5. Реализовать формирование списка, используя функцию ​range() и возможности генератора. В 
# список должны войти чётные числа от 100 до 1000 (включая границы). Нужно получить 
# результат вычисления произведения всех элементов списка. 

# Подсказка: использовать функцию ​reduce()​. 





from functools import reduce
listok = [i for i in range(100, 1000, 2)]
def my_func(prev_el, el):
     return prev_el * el
print(reduce(my_func, listok))





# 6. Реализовать два небольших скрипта: 
# ● итератор, генерирующий целые числа, начиная с указанного; 
# ● итератор, повторяющий элементы некоторого списка, определённого заранее. 

# Подсказка: используйте функцию ​count() и cycle() модуля ​itertools​. Обратите внимание, что 
# создаваемый цикл не должен быть бесконечным. Предусмотрите условие его завершения.  

# Например, в первом задании выводим целые числа, начиная с 3. При достижении числа 10 — 
# завершаем цикл. Вторым пунктом необходимо предусмотреть условие, при котором 
# повторение элементов списка прекратится. 





from itertools import count
for i in count(18):
    if i > 30:
        break
    else:
        print(i)





from itertools import cycle
spisok = [56, 'fdfg', 2, True]
c = 0
for i in cycle(spisok):
    if c > 10:
        break
    print(i)
    c+= 1


#


# 7. Реализовать генератор с помощью функции с ключевым словом ​yield​, создающим очередное 
# значение. При вызове функции должен создаваться объект-генератор. Функция вызывается 
# следующим образом: ​for el in fact(n)​. Она отвечает за получение факториала числа. В цикле 
# нужно выводить только первые n чисел, начиная с 1! и до n!. 

# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал 
# четырёх 4! = 1 * 2 * 3 * 4 = 24. 




def fact(f):
    x = 1
    for i in range(1, f + 1):
        x = x * i
        yield x
g = fact(8)
print(g)
for i in g:
    print(i)

